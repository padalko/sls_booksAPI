app: books-manager
service: library-api
org: vadimepadalko

custom:
  dynamodb:
    booksTable: ${self:service}-booksTable-${self:provider.stage}
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
    migration:
      dir: offline_migrations

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  environment:
    DYNAMODB_BOOKS_TABLE: ${self:custom.dynamodb.booksTable}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        'arn:aws:dynamodb:${opt:region,
        self:provider.region}:*:table/${self:custom.dynamodb.booksTable}'

plugins:
  - serverless-offline
  - serverless-dynamodb-local

functions:
  getBookById:
    handler: src/api/books.get
    events:
      - http:
          path: /book/{bookUuid}
          method: get

  getAllbooks:
    handler: src/api/books.list
    events:
      - http:
          path: /books
          method: get

  createBook:
    handler: src/api/books.create
    events:
      - http:
          path: book/add
          method: post

  updateBookById:
    handler: src/api/books.update
    events:
      - http:
          path: book/{bookUuid}/update
          method: post

  deleteBookById:
    handler: src/api/books.delete
    events:
      - http:
          path: book/{bookUuid}/delete
          method: post

resources:
  Resources:
    TodosDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:custom.dynamodb.booksTable}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
